name: CI

on: 
  push:
  pull_request:
    branches: [ main ]

jobs:
  get-versions:
    runs-on: ubuntu-latest
    outputs:
      deno-versions: ${{ steps.fetch-versions.outputs.deno-versions }}
    steps:
      - 
        name: Get Deno Versions
        id: fetch-versions
        run: |
          DENO_VERSIONS=$(curl -s https://api.github.com/repos/denoland/deno/releases | jq -r '.[].tag_name' | sed 's/v//' | sort -V | tail -n 3 | tac | jq -Rcn '[inputs]')
          echo "deno-versions=${DENO_VERSIONS}" >> "$GITHUB_OUTPUT"

  check-code:
    runs-on: ubuntu-latest
    steps:
      -
        name: Setup
        uses: actions/checkout@v3
      -
        name: Setup Deno
        uses: denoland/setup-deno@v1.1.2
      -
        name: Check formatting & linting
        run: |
          deno fmt --check
          deno lint
          deno check **/*.ts
  
  # We run tests on multiple versions of deno, just to be safe
  run-tests: 
    needs: [get-versions]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        deno-version: ${{ fromJson(needs.get-versions.outputs.deno-versions) }}
    services:
      redis:
        image: redis
        ports:
          - 6379:6379
      postgres:
        image: postgres
        env:
          POSTGRES_PASSWORD: postgres
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      maria:
        image: mariadb:10
        env:
          MARIADB_ROOT_PASSWORD: maria
        ports:
          - 3306:3306
        options: >-
          --health-cmd "mysql --password=$MARIADB_ROOT_PASSWORD -e 'show databases;'"
          --health-interval 10s
          --health-timeout 10s
          --health-retries 5
      mongo:
        image: mongo:latest
        ports:
          - 27017:27017
    
    steps:
      -
        name: Setup
        uses: actions/checkout@v3
      -
        name: Setup Deno
        uses: denoland/setup-deno@v1.1.2
        with:
          deno-version: v${{ matrix.deno-version }}
      -
        name: Run tests
        run: |
          deno task test
          # deno test -A --unstable --coverage=cov #--doc
        env:
          PG_HOST: localhost
          PG_PORT: 5432
          PG_USER: postgres
          PG_PASS: postgres
          MARIA_HOST: localhost
          MARIA_PORT: 3306
          MARIA_USER: root
          MARIA_PASS: mariapw
          MONGO_HOST: localhost
          MONGO_PORT: 27017
          MONGO_DB: test
          REDIS_HOST: localhost
          REDIS_PORT: 6379
          
      -
        name: Generate coverage report
        run: deno coverage --lcov cov > cov.lcov
      
      # - name: upload coverage
      #   uses: codecov/codecov-action@v2
      #   with:
      #     files: cov.lcov