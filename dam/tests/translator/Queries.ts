import { alphaNumeric, nanoId } from '../../../id/mod.ts';

const schemaName = `test_${nanoId(6, alphaNumeric)}`;
const uid = crypto.randomUUID();

export const queries = {
  create_schema: {
    type: 'CREATE_SCHEMA',
    schema: schemaName,
  },
  drop_schema: {
    type: 'DROP_SCHEMA',
    schema: schemaName,
  },
  create_user: {
    type: 'CREATE_TABLE',
    schema: schemaName,
    source: 'Users',
    columns: {
      Id: {
        type: 'UUID',
        nullable: false,
      },
      Name: {
        type: 'VARCHAR',
        length: [100],
        nullable: false,
      },
      Email: {
        type: 'VARCHAR',
        length: [255],
        nullable: false,
      },
      Password: {
        type: 'VARCHAR',
        length: [255],
        nullable: false,
      },
      DOB: {
        type: 'DATE',
        nullable: true,
      },
      Status: {
        type: 'BOOLEAN',
        nullable: false,
      },
      Profile: {
        type: 'JSON',
        nullable: true,
      },
      JoinDate: {
        type: 'TIMESTAMP',
        nullable: false,
      },
    },
    primaryKeys: ['Id'],
    uniqueKeys: {
      NameEmail: ['Name', 'Email'],
      User: ['Name', 'DOB'],
    },
  },
  create_post: {
    type: 'CREATE_TABLE',
    schema: schemaName,
    source: 'Posts',
    columns: {
      Id: {
        type: 'UUID',
        nullable: false,
      },
      Title: {
        type: 'VARCHAR',
        length: [100],
        nullable: false,
      },
      Meta: {
        type: 'JSON',
        nullable: false,
      },
      Content: {
        type: 'TEXT',
        nullable: false,
      },
      CreatedDate: {
        type: 'TIMESTAMP',
        nullable: false,
      },
      PublishDate: {
        type: 'TIMESTAMP',
        nullable: true,
      },
      Published: {
        type: 'BOOLEAN',
        nullable: false,
      },
      AuthorId: {
        type: 'UUID',
        nullable: true,
      },
    },
    primaryKeys: ['Id'],
    uniqueKeys: {
      Title: ['Title'],
    },
    foreignKeys: {
      Author: {
        source: 'Users',
        schema: schemaName,
        relation: {
          AuthorId: 'Id',
        },
      },
    },
  },
  create_view: {
    type: 'CREATE_VIEW',
    schema: schemaName,
    source: 'UserPosts',
    materialized: false,
    query: {
      type: 'SELECT',
      source: 'Users',
      schema: schemaName,
      columns: [
        'Id',
        'Name',
        'Email',
        'Password',
        'DOB',
        'Status',
        'Profile',
        'JoinDate',
      ],
      filters: {
        Name: {
          $ilike: 'doe',
        },
      },
      joins: {
        Posts: {
          source: 'Posts',
          schema: 'test',
          columns: [
            'Id',
            'Title',
            'Meta',
            'Content',
            'CreatedDate',
            'PublishDate',
            'Published',
            'AuthorId',
          ],
          relation: {
            AuthorId: '$Id',
          },
        },
      },
      project: {
        Id: '$Id',
        Name: '$Name',
        Email: '$Email',
        Password: '$Password',
        DOB: '$DOB',
        Status: '$Status',
        Profile: '$Profile',
        MaritalStatus: {
          $expr: 'JSON_VALUE',
          $args: ['$Profile', ['maritalStatus']],
        },
        JoinDate: '$JoinDate',
        PostCount: { $aggr: 'COUNT', $args: '$Posts.Id' },
      },
    },
  },
  drop_view: {
    type: 'DROP_VIEW',
    schema: schemaName,
    source: 'UserPosts',
    materialized: false,
  },
  select_view: {
    type: 'SELECT',
    source: 'UserPosts',
    schema: schemaName,
    columns: [
      'Id',
      'Name',
      'Email',
      'Password',
      'DOB',
      'Status',
      'Profile',
      'JoinDate',
      'MaritalStatus',
      'PostCount',
    ],
    project: {
      Id: '$Id',
      Name: '$Name',
      Email: '$Email',
      Password: '$Password',
      DOB: '$DOB',
      Status: '$Status',
      Profile: '$Profile',
      JoinDate: '$JoinDate',
      MaritalStatus: '$MaritalStatus',
      PostCount: '$PostCount',
    },
  },
  insert_user: {
    type: 'INSERT',
    source: 'Users',
    schema: schemaName,
    columns: [
      'Id',
      'Name',
      'Email',
      'Password',
      'DOB',
      'Status',
      'Profile',
      'JoinDate',
    ],
    values: [{
      Id: { $expr: 'UUID' },
      Name: `John Doe`,
      Email: `john@doe.com`,
      Password: 'sdfs sdf sdf ',
      DOB: new Date('1990-01-01'),
      Status: true,
      Profile: {
        maritalStatus: 'SINGLE',
        website: 'https://google.com',
        bio: 'This is a bio',
      },
      JoinDate: new Date(),
    }, {
      Id: uid,
      Name: `Jane Doe`,
      Email: `jane@doe.com`,
      Password: 'sdfs sdf sdf ',
      DOB: new Date('1996-11-01'),
      Status: true,
      Profile: {
        maritalStatus: 'MARRIED',
        website: 'https://bing.com',
        bio: 'This is not a bio',
      },
      JoinDate: new Date(),
    }],
    project: {
      Id: '$Id',
      Name: '$Name',
      Email: '$Email',
      Password: '$Password',
      DOB: '$DOB',
      Status: '$Status',
      Profile: '$Profile',
      MaritalStatus: {
        $expr: 'JSON_VALUE',
        $args: ['$Profile', ['maritalStatus']],
      },
      JoinDate: '$JoinDate',
    },
  },
  update_user: {
    type: 'UPDATE',
    source: 'Users',
    schema: schemaName,
    columns: [
      'Id',
      'Name',
      'Email',
      'Password',
      'DOB',
      'Status',
      'Profile',
      'JoinDate',
    ],
    data: {
      Password: nanoId(36),
    },
    filters: {
      Name: {
        $ilike: 'doe',
      },
    },
  },
  delete_user: {
    type: 'DELETE',
    source: 'Users',
    schema: schemaName,
    columns: [
      'Id',
      'Name',
      'Email',
      'Password',
      'DOB',
      'Status',
      'Profile',
      'JoinDate',
    ],
  },
  select_user: {
    type: 'SELECT',
    source: 'Users',
    schema: schemaName,
    columns: [
      'Id',
      'Name',
      'Email',
      'Password',
      'DOB',
      'Status',
      'Profile',
      'JoinDate',
    ],
    filters: {
      Name: {
        $ilike: 'doe',
      },
    },
    joins: {
      Posts: {
        source: 'Posts',
        schema: 'test',
        columns: [
          'Id',
          'Title',
          'Meta',
          'Content',
          'CreatedDate',
          'PublishDate',
          'Published',
          'AuthorId',
        ],
        relation: {
          AuthorId: '$Id',
        },
      },
    },
    project: {
      Id: '$Id',
      Name: '$Name',
      Email: '$Email',
      Password: '$Password',
      DOB: '$DOB',
      Status: '$Status',
      Profile: '$Profile',
      MaritalStatus: {
        $expr: 'JSON_VALUE',
        $args: ['$Profile', ['maritalStatus']],
      },
      JoinDate: '$JoinDate',
      PostCount: { $aggr: 'COUNT', $args: '$Posts.Id' },
    },
  },
  insert_post: {
    type: 'INSERT',
    source: 'Posts',
    schema: schemaName,
    columns: [
      'Id',
      'Title',
      'Meta',
      'Content',
      'CreatedDate',
      'PublishDate',
      'Published',
      'AuthorId',
    ],
    values: [{
      Id: { $expr: 'UUID' },
      Title: `Post 1`,
      Meta: {
        tags: ['tag1', 'tag2', 'tag3'],
        category: 'category1',
      },
      Content: 'This is a post',
      CreatedDate: new Date(),
      PublishDate: new Date(),
      Published: true,
      AuthorId: uid,
    }, {
      Id: { $expr: 'UUID' },
      Title: `Post 2`,
      Meta: {
        tags: ['tag4', 'tag5', 'tag6'],
        category: 'category2',
      },
      Content: 'This is another post',
      CreatedDate: new Date(),
      PublishDate: new Date(),
      Published: true,
      AuthorId: uid,
    }],
    project: {
      Id: '$Id',
      Title: '$Title',
      Meta: '$Meta',
      Content: '$Content',
      CreatedDate: '$CreatedDate',
      PublishDate: '$PublishDate',
      Published: '$Published',
      AuthorId: '$AuthorId',
    },
  },
  select_post: {
    type: 'SELECT',
    source: 'Posts',
    schema: schemaName,
    columns: [
      'Id',
      'Title',
      'Meta',
      'Content',
      'CreatedDate',
      'PublishDate',
      'Published',
      'AuthorId',
    ],
    joins: {
      Author: {
        source: 'Users',
        schema: schemaName,
        columns: [
          'Id',
          'Name',
          'Email',
          'Password',
          'DOB',
          'Status',
          'Profile',
          'JoinDate',
        ],
        relation: {
          Id: '$AuthorId',
        },
      },
    },
    project: {
      Id: '$Id',
      Title: '$Title',
      Meta: '$Meta',
      Content: '$Content',
      CreatedDate: '$CreatedDate',
      PublishDate: '$PublishDate',
      Published: '$Published',
      AuthorInfo: {
        $aggr: 'JSON_ROW',
        $args: {
          Id: '$Author.Id',
          Name: '$Author.Name',
          Email: '$Author.Email',
          DOB: '$Author.DOB',
          Status: '$Author.Status',
          Profile: '$Author.Profile',
          JoinDate: '$Author.JoinDate',
        },
      },
    },
  },
  truncate_post: {
    type: 'TRUNCATE',
    source: 'Posts',
    schema: schemaName,
  },
};
